/*Program to reverse a Linked list using iterative
 * Create a next,prev and current:next always points to next address of the list:Prev at the start is null and then points to prev addr of the list .Every
 * time the current is reduced by 1 . 
 * Input :5 1 9   -->Output :After Reversing using iterative method 9 1 5
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace DataStructure
{
    class Node
    {
        public int data;
        public Node next;
    }
    class Operation
    {
        Node head = null;
        public void Insert(ref Node head, int data)
        {
            Node temp = new Node();
            temp.data = data;

            if (head == null)
            {
                temp.next = null;
                head = temp;
            }
            else
            {
                temp.next = head;
                head = temp;
            }

        }

        public void PrintElements(Node node)
        {
            Node temp = node;
            while (temp != null)
            {
                Console.WriteLine("\n{0}", temp.data);
                temp = temp.next;
            }
        }
        public void ReverseRecursive(Node node)
        {
            if (node.next == null)
            {
                head = node;
                Console.WriteLine(head.data +"\n");
                return;
            }
            ReverseRecursive(node.next);
            node.next.next=node;
            node.next = null;
            Console.WriteLine(node.data + "\n");
            
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            Node head = null;
            Operation op = new Operation();
            op.Insert(ref head, 5);
            op.Insert(ref head, 1);
            op.Insert(ref head, 9);
            op.Insert(ref head, 3);
            op.PrintElements(head);
            Console.WriteLine("Reverse using Recursion\n");
            op.ReverseRecursive(head);
            Console.ReadLine();
        }
    }
}
