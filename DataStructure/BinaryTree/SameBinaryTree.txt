#include "stdafx.h"
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node* left;
	struct node* right;
}node;
struct node* root = NULL;
typedef struct node1
{
	int data;
	struct node1* left;
	struct node1* right;
}node1;
struct node1* root1 = NULL;

struct node* Insert(int data)
{
	node *temp = (node *)malloc(sizeof(node));
	temp->data = data;
	temp->left = NULL;
	temp->right = NULL;
	return temp;
}
struct node1* InsertNode1(int data)
{
	node1 *temp = (node1 *)malloc(sizeof(node1));
	temp->data = data;
	temp->left = NULL;
	temp->right = NULL;
	return temp;
}
int SameBinaryTree(struct node* root, struct node1* root1)
{
	if (root == NULL && root1 == NULL)
	{
		return true;
	}
	else if (root == NULL && root1 != NULL || root != NULL && root1 == NULL)
	{
		return false;
	}
	int result = root1->data == root->data;
	return (result && SameBinaryTree(root->left, root1->left) && SameBinaryTree(root->right, root1->right));
}
int main()
{
	root = Insert(10);
	root->left = Insert(2);
	root->left->left = Insert(7);
	root->right = Insert(5);
	root->right->left = Insert(8);
	root->right->right = Insert(3);
	root->right->right->right = Insert(3);

	root1 = InsertNode1(10);
	root1->left = InsertNode1(2);
	root1->left->left = InsertNode1(6);
	root1->right = InsertNode1(5);
	root1->right->left = InsertNode1(8);
	root1->right->right = InsertNode1(3);
	root1->right->right->right = InsertNode1(3);

	int result = SameBinaryTree(root, root1);
	if (result == 1)
	{
		printf("Both the trees are same");
	}
	else
	{
		printf("Trees are not same");
	}
	getchar();
	return 0;
}


